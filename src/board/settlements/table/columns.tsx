import moment from 'moment';

import {getTimeString} from '@src/lib/DateParser';
import {addCommaToNumber} from '@src/lib/NumberParser';
import {stringSorter} from '@src/lib/sorter';

export const settlementColumns = [
  {
    title: '주문번호',
    dataIndex: 'orderMerchantUid',
    key: 'orderMerchantUid',
    sorter: (a, b) => b.orderMerchantUid - a.orderMerchantUid,
    width: 120,
    ellipsis: true,
  },
  {
    title: '상품주문번호',
    dataIndex: 'merchantUid',
    key: 'merchantUid',
    sorter: (a, b) => b.merchantUid - a.merchantUid,
    width: 140,
    ellipsis: true,
  },
  {
    title: '상품번호',
    dataIndex: 'productSku',
    key: 'productSku',
    sorter: (a, b) => stringSorter(b.productSku, a.productSku),
    width: 100,
    ellipsis: true,
  },
  {
    title: '주문일시',
    dataIndex: 'paidAt',
    key: 'paidAt',
    render: (value) => <div>{getTimeString(value)}</div>,
    sorter: (a, b) => stringSorter(b.paidAt, a.paidAt),
    width: 140,
    ellipsis: true,
  },
  {
    title: '주문상태',
    dataIndex: 'status',
    key: 'status',
    sorter: (a, b) => stringSorter(b.status, a.status),
    width: 90,
    ellipsis: true,
  },
  {
    title: '정산상태',
    dataIndex: 'settleStatus',
    key: 'settleStatus',
    sorter: (a, b) => stringSorter(b.settleStatus, a.settleStatus),
    width: 90,
    ellipsis: true,
  },
  {
    title: '구매확정일시',
    dataIndex: 'confirmedAt',
    key: 'confirmedAt',
    render: (value) => <div>{getTimeString(value)}</div>,
    sorter: (a, b) => stringSorter(b.confirmedAt, a.confirmedAt),
    width: 140,
    ellipsis: true,
  },
  {
    title: '브랜드명',
    dataIndex: 'brandName',
    key: 'brandName',
    sorter: (a, b) => stringSorter(b.brandName, a.brandName),
    width: 100,
    ellipsis: true,
  },
  {
    title: '상품명',
    dataIndex: 'itemName',
    key: 'itemName',
    sorter: (a, b) => stringSorter(b.itemName, a.itemName),
    width: 200,
    ellipsis: true,
  },
  {
    title: '옵션(통합)',
    dataIndex: 'options',
    key: 'options',
    render: (value) => value.join('-'),
    sorter: (a, b) => b.options.join('-').localeCompare(a.options.join('-')),
    width: 100,
    ellipsis: true,
  },
  {
    title: '수량',
    dataIndex: 'quantity',
    key: 'quantity',
    sorter: (a, b) => b.quantity - a.quantity,
    width: 75,
    ellipsis: true,
  },
  {
    title: '구매자명',
    dataIndex: 'buyerName',
    key: 'buyerName',
    sorter: (a, b) => stringSorter(b.buyerName, a.buyerName),
    width: 100,
    ellipsis: true,
  },
  {
    title: '리뷰어',
    dataIndex: 'reviewer',
    key: 'reviewer',
    sorter: (a, b) => stringSorter(b.reviewer, a.reviewer),
    width: 100,
    ellipsis: true,
  },
  {
    title: '기본 구독할인율',
    dataIndex: 'defaultSubsDiscountRate',
    key: 'defaultSubsDiscountRate',
    render: (value) => <div>{value}%</div>,
    sorter: (a, b) => b.defaultSubsDiscountRate - a.defaultSubsDiscountRate,
    width: 150,
    ellipsis: true,
  },
  {
    title: '적용 구독할인율',
    dataIndex: 'appliedSubsDiscountRate',
    key: 'appliedSubsDiscountRate',
    render: (value) => <div>{value}%</div>,
    sorter: (a, b) => b.appliedSubsDiscountRate - a.appliedSubsDiscountRate,
    width: 150,
    ellipsis: true,
  },
  {
    title: '추가 구독할인율',
    dataIndex: 'additionalSubsDiscountRate',
    key: 'additionalSubsDiscountRate',
    render: (value) => <div>{value}%</div>,
    sorter: (a, b) =>
      b.additionalSubsDiscountRate - a.additionalSubsDiscountRate,
    width: 150,
    ellipsis: true,
  },
  {
    title: '정가',
    dataIndex: 'originalPrice',
    key: 'originalPrice',
    render: (value) => <div>{addCommaToNumber(value)}원</div>,
    sorter: (a, b) => b.originalPrice - a.originalPrice,
    width: 100,
    ellipsis: true,
  },
  {
    title: '판매가격',
    dataIndex: 'salePrice',
    key: 'salePrice',
    render: (value) => <div>{addCommaToNumber(value)}원</div>,
    sorter: (a, b) => b.salePrice - a.salePrice,
    width: 100,
    ellipsis: true,
  },
  {
    title: '배송비',
    dataIndex: 'shippingFee',
    key: 'shippingFee',
    render: (value) => <div>{addCommaToNumber(value)}원</div>,
    sorter: (a, b) => b.shippingFee - a.shippingFee,
    width: 100,
    ellipsis: true,
  },
  {
    title: '구독할인액',
    dataIndex: 'subsDiscount',
    key: 'subsDiscount',
    render: (value) => <div>{addCommaToNumber(value)}원</div>,
    sorter: (a, b) => b.subsDiscount - a.subsDiscount,
    width: 100,
    ellipsis: true,
  },
  {
    title: '포인트',
    dataIndex: 'pointDiscount',
    key: 'pointDiscount',
    render: (value) => <div>{addCommaToNumber(value)}원</div>,
    sorter: (a, b) => b.pointDiscount - a.pointDiscount,
    width: 100,
    ellipsis: true,
  },
  {
    title: '결제액',
    dataIndex: 'totalPaidAmount',
    key: 'totalPaidAmount',
    render: (value) => <div>{addCommaToNumber(value)}원</div>,
    sorter: (a, b) => b.totalPaidAmount - a.totalPaidAmount,
    width: 120,
    ellipsis: true,
  },
  {
    title: '정산기준액',
    dataIndex: 'referenceAmount',
    key: 'referenceAmount',
    render: (value) => <div>{addCommaToNumber(value)}원</div>,
    sorter: (a, b) => b.referenceAmount - a.referenceAmount,
    width: 120,
    ellipsis: true,
  },
  {
    title: '정산예정일',
    dataIndex: 'expectedDate',
    key: 'expectedDate',
    render: (value) => <div>{moment(value).format('YY/MM/DD')}</div>,
    sorter: (a, b) => stringSorter(b.expectedDate, a.expectedDate),
    width: 100,
    ellipsis: true,
  },
];
